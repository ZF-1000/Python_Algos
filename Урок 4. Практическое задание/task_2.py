"""
Написать два алгоритма нахождения i-го по счёту простого числа.
Без использования «Решета Эратосфена»;
Используя алгоритм «Решето Эратосфена»

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО
"""

import timeit

"""
Реализация №1. Без использования «Решета Эратосфена»
"""

print(f'\n_________________Алгоритм без использования «Решета Эратосфена»_________________')


def prime_numb(elem, fin_numb):
    LST = []
    for k in range(2, fin_numb + 1):
        for i in range(2, k):
            if k % i == 0:
                break
        else:
            LST.append(k)
    # print(LST)
    # print(LST[elem - 1])


LAUNCH_LST = [1, 10, 100, 1000]  # массив запусков программы

print(f'\nПоиск 10-го по счёту простого числа')
for i in LAUNCH_LST:
    print(f'Число запусков кода = {i}. ', end='')
    print(f'Время выполнения операции = ', end='')
    print(
        timeit.timeit(
            'prime_numb(10, 29)',
            setup='from __main__ import prime_numb',
            number=i))

print(f'\nПоиск 100-го по счёту простого числа')
for i in LAUNCH_LST:
    print(f'Число запусков кода = {i}. ', end='')
    print(f'Время выполнения операции = ', end='')
    print(
        timeit.timeit(
            'prime_numb(100, 541)',
            setup='from __main__ import prime_numb',
            number=i))

print(f'\nПоиск 1000-го по счёту простого числа')
for i in LAUNCH_LST:
    print(f'Число запусков кода = {i}. ', end='')
    print(f'Время выполнения операции = ', end='')
    print(
        timeit.timeit(
            'prime_numb(1000, 7919)',
            setup='from __main__ import prime_numb',
            number=i))


"""
Реализация №2. С использованием «Решета Эратосфена»
"""

print(f'\n_________________Алгоритм с использованием «Решета Эратосфена»_________________')


def prime_numb_ert(elem, fin_numb):
    a = [0] * (fin_numb + 1)  # создание массива с n количеством элементов
    for i in range(fin_numb + 1):  # заполнение массива ...
        a[i] = i  # значениями от 0 до n-1

    # вторым элементом является единица, которую не считают простым числом
    # забиваем ее нулем.
    a[1] = 0

    m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    while m < fin_numb:  # перебор всех элементов до заданного числа
        if a[m] != 0:  # если он не равен нулю, то
            j = m * 2  # увеличить в два раза (текущий элемент простое число)
            while j < fin_numb:
                a[j] = 0  # заменить на 0
                j = j + m  # перейти в позицию на m больше
        m += 1

    # вывод простых чисел на экран (может быть реализован как угодно)
    LST = []
    for i in a:
        if a[i] != 0:
            LST.append(a[i])

    del a
    # print(LST)
    # print(LST[elem-1])


print(f'\nПоиск 10-го по счёту простого числа')
for i in LAUNCH_LST:
    print(f'Число запусков кода = {i}. ', end='')
    print(f'Время выполнения операции = ', end='')
    print(
        timeit.timeit(
            'prime_numb_ert(10, 29)',
            setup='from __main__ import prime_numb_ert',
            number=i))

print(f'\nПоиск 100-го по счёту простого числа')
for i in LAUNCH_LST:
    print(f'Число запусков кода = {i}. ', end='')
    print(f'Время выполнения операции = ', end='')
    print(
        timeit.timeit(
            'prime_numb_ert(100, 541)',
            setup='from __main__ import prime_numb_ert',
            number=i))

print(f'\nПоиск 1000-го по счёту простого числа')
for i in LAUNCH_LST:
    print(f'Число запусков кода = {i}. ', end='')
    print(f'Время выполнения операции = ', end='')
    print(
        timeit.timeit(
            'prime_numb_ert(1000, 7919)',
            setup='from __main__ import prime_numb_ert',
            number=i))
"""
Рассмотрел 2 варианта кода:
- алгоритм без использования «Решета Эратосфена» (Алгоритм №1). Сложность алгоритма О(n^2)
- алгоритм с использованием «Решета Эратосфена» (Алгоритм №2). Сложность алгоритма О(n log n)

Для обоих вариантов вёлся поиск 10, 100 и 1000-го по счёту простого числа.
В рамках обоих алгоритмов наблюдается следующая тенденция:
с ростом числа запусков кода от 1 до 1000 время выполнения операции
растёт приблизительно прямо пропорционально для поиска заданных простых чисел, однако
для поиска 10-го по счёту простого числа алгоритм №2 работает в 2 раза быстрее алгоритма №1,
хотя с ростом числа запусков кода (1000 раз) алгоритм №2 работает в 1,5 раза быстрее алгоритма №1.

А вот для поска 1000-го по счёту простого числа алгоритм №2 работает в 63 раза быстрее алгоритма №1,
а с ростом числа запусков кода (1000 раз) алгоритм №2 работает в 58 раз быстрее алгоритма №1.

Таким образом можно сделать вывод, что алгоритм с использованием «Решета Эратосфена»
работает значительно быстрее при больших значениях входных данных нежели алгоритм №1.
При небольших входных значениях разницу во времени можно считать незначительной в виду 
быстроты выполнения алгоритмов.
"""

'''
Результаты вычислений

_________________Алгоритм без использования «Решета Эратосфена»_________________

Поиск 10-го по счёту простого числа
Число запусков кода = 1. Время выполнения операции = 5.7937999999993495e-05
Число запусков кода = 10. Время выполнения операции = 0.000513226999999998
Число запусков кода = 100. Время выполнения операции = 0.003692026000000001
Число запусков кода = 1000. Время выполнения операции = 0.037813992000000005

Поиск 100-го по счёту простого числа
Число запусков кода = 1. Время выполнения операции = 0.0028550030000000087
Число запусков кода = 10. Время выполнения операции = 0.03525731
Число запусков кода = 100. Время выполнения операции = 0.34509166
Число запусков кода = 1000. Время выполнения операции = 3.326891635

Поиск 1000-го по счёту простого числа
Число запусков кода = 1. Время выполнения операции = 0.5088672330000006
Число запусков кода = 10. Время выполнения операции = 5.073670819
Число запусков кода = 100. Время выполнения операции = 49.918497646999995
Число запусков кода = 1000. Время выполнения операции = 492.026985692

_________________Алгоритм с использованием «Решета Эратосфена»_________________

Поиск 10-го по счёту простого числа
Число запусков кода = 1. Время выполнения операции = 2.8764000035153003e-05
Число запусков кода = 10. Время выполнения операции = 0.00024243699999715318
Число запусков кода = 100. Время выполнения операции = 0.002454776000035963
Число запусков кода = 1000. Время выполнения операции = 0.025192891999950007

Поиск 100-го по счёту простого числа
Число запусков кода = 1. Время выполнения операции = 0.0004935030000297047
Число запусков кода = 10. Время выполнения операции = 0.00485860000003413
Число запусков кода = 100. Время выполнения операции = 0.049060598000096434
Число запусков кода = 1000. Время выполнения операции = 0.5299448600000005

Поиск 1000-го по счёту простого числа
Число запусков кода = 1. Время выполнения операции = 0.00806369800000084
Число запусков кода = 10. Время выполнения операции = 0.0776537689999941
Число запусков кода = 100. Время выполнения операции = 0.8285827340000651
Число запусков кода = 1000. Время выполнения операции = 8.539016930999992
'''
